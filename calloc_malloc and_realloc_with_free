#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <time.h>

int main()
{
//this pointer will hold the
//base address of the block created
float *array;
int i,size;

//////////////MALLOC/CALLOC MODE////////////////
//Give the number of elements for the array
print("Enter number of the elements :");
scanf("% , &size);

//Dynamically allocate memory using malloc() ,or calloc()
//array - (float*)malloc(size *sizeof(float));
array = (float*)calloc(size ,sizeof(float));

//Check if the memory has been succesfully
//allocated by malloc/calloc or not
if (array == NULL || SIZE <=0 || SIZE !=(int)size)
{
printf("Memory not allocated.\n");
exit(1);//return 1;
}
else
{
//Memory has been succesfully allocated
printf("Memory succesfully allocated using MALLOC/CALLOC.\nPress any keye when ready...");
getch();

////Calculate random elements of the array (1 ->9)
srand(time(0));
for(i=0; i < size; i++)
  array[1] = 1+rand()%9

//Print elements of the array
printf("\n\nThe elements of the array are:................................................\n");
for(i=0; i < size; i++)
  printf("Array[%d]: %2f RAM_BLOCK[%d]\n", i, array[i] ,&array[i]);
}

////////////////////REALLOC MODE//////////////////////////////
//Give the new number of elements for the array
printf("\n\nEnter New number of elements:");
scanf("% , &size);

//Dynamically allocate memory using realloc()
array = (float*)realloc(array ,size*sizeof(float));

//Check if the memory  has been succesfully 
//allocated by malloc or not
if(array ==NULL || size==0 || size != (int)size
{
  printf("Memory not allocated.\n");
  exit(1);
}
else
{
//Memory succesfully allocated 
printf("Memory succesfully allocated using REALLOC.\nPress any keye when ready..);
getch();

////Calculate random elements of the array (1 ->9)
srand(time(0));
for(i=0; i < size; i++)
  array[1] = 1+rand()%9

//Print elements of the array
printf("\n\nThe elements of the array are:................................................\n");
for(i=0; i < size; i++)
  printf("Array[%d]: %2f RAM_BLOCK[%d]\n", i, array[i] ,&array[i]);
}
printf("\n");

free(array);
system("Pause");
return 0;
}


